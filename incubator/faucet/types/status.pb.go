// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: v1/status.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgMining struct {
	Minter   string `protobuf:"bytes,1,opt,name=minter,proto3" json:"minter,omitempty" yaml:"minter"`
	Lasttime int64  `protobuf:"varint,2,opt,name=lasttime,proto3" json:"lasttime,omitempty" yaml:"lasttime"`
	Tally    int64  `protobuf:"varint,3,opt,name=tally,proto3" json:"tally,omitempty" yaml:"tally"`
}

func (m *MsgMining) Reset()         { *m = MsgMining{} }
func (m *MsgMining) String() string { return proto.CompactTextString(m) }
func (*MsgMining) ProtoMessage()    {}
func (*MsgMining) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8dac81fd98b7df8, []int{0}
}
func (m *MsgMining) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMining) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMining.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMining) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMining.Merge(m, src)
}
func (m *MsgMining) XXX_Size() int {
	return m.Size()
}
func (m *MsgMining) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMining.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMining proto.InternalMessageInfo

func (m *MsgMining) GetMinter() string {
	if m != nil {
		return m.Minter
	}
	return ""
}

func (m *MsgMining) GetLasttime() int64 {
	if m != nil {
		return m.Lasttime
	}
	return 0
}

func (m *MsgMining) GetTally() int64 {
	if m != nil {
		return m.Tally
	}
	return 0
}

type MsgMiningResponse struct {
}

func (m *MsgMiningResponse) Reset()         { *m = MsgMiningResponse{} }
func (m *MsgMiningResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMiningResponse) ProtoMessage()    {}
func (*MsgMiningResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8dac81fd98b7df8, []int{1}
}
func (m *MsgMiningResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMiningResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMiningResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMiningResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMiningResponse.Merge(m, src)
}
func (m *MsgMiningResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMiningResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMiningResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMiningResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgMining)(nil), "faucet.v1.MsgMining")
	proto.RegisterType((*MsgMiningResponse)(nil), "faucet.v1.MsgMiningResponse")
}

func init() { proto.RegisterFile("v1/status.proto", fileDescriptor_d8dac81fd98b7df8) }

var fileDescriptor_d8dac81fd98b7df8 = []byte{
	// 288 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x3c, 0x90, 0xb1, 0x4e, 0x02, 0x31,
	0x1c, 0x87, 0xa9, 0x44, 0x22, 0x8d, 0x06, 0x39, 0x1c, 0x80, 0xa1, 0x90, 0x0e, 0x06, 0x17, 0x1a,
	0x62, 0x5c, 0x1c, 0xd9, 0x89, 0xc9, 0x8d, 0x2e, 0xa6, 0x77, 0x96, 0xd2, 0xa4, 0xed, 0x9f, 0x5c,
	0x5b, 0x92, 0x7b, 0x0a, 0x7d, 0x2c, 0x47, 0x46, 0x27, 0x62, 0xb8, 0x37, 0xb8, 0x27, 0x30, 0x5e,
	0x91, 0xad, 0xbf, 0xef, 0xfb, 0x86, 0xb6, 0xb8, 0xb7, 0x5b, 0x30, 0xe7, 0xb9, 0x0f, 0x6e, 0xbe,
	0x2d, 0xc0, 0x43, 0xd2, 0x5d, 0xf3, 0x90, 0x0b, 0x3f, 0xdf, 0x2d, 0xc6, 0xa3, 0x1c, 0x9c, 0x01,
	0xf7, 0xd6, 0x08, 0x16, 0x47, 0xac, 0xc6, 0x77, 0x12, 0x24, 0x44, 0xfe, 0x77, 0x3a, 0xd1, 0x91,
	0x04, 0x90, 0x5a, 0xb0, 0x66, 0x65, 0x61, 0xcd, 0xb8, 0x2d, 0xa3, 0xa2, 0x1f, 0x08, 0x77, 0x57,
	0x4e, 0xae, 0x94, 0x55, 0x56, 0x26, 0x0f, 0xb8, 0x63, 0x94, 0xf5, 0xa2, 0x18, 0xa2, 0x29, 0x9a,
	0x75, 0x97, 0xfd, 0xfa, 0x30, 0xb9, 0x29, 0xb9, 0xd1, 0xcf, 0x34, 0x72, 0x9a, 0x9e, 0x82, 0x84,
	0xe1, 0x2b, 0xcd, 0x9d, 0xf7, 0xca, 0x88, 0xe1, 0xc5, 0x14, 0xcd, 0xda, 0xcb, 0x41, 0x7d, 0x98,
	0xf4, 0x62, 0xfc, 0x6f, 0x68, 0x7a, 0x8e, 0x92, 0x7b, 0x7c, 0xe9, 0xb9, 0xd6, 0xe5, 0xb0, 0xdd,
	0xd4, 0xb7, 0xf5, 0x61, 0x72, 0x1d, 0xeb, 0x06, 0xd3, 0x34, 0x6a, 0x3a, 0xc0, 0xfd, 0xf3, 0x85,
	0x52, 0xe1, 0xb6, 0x60, 0x9d, 0x58, 0xbe, 0x7c, 0x1d, 0x09, 0xda, 0x1f, 0x09, 0xfa, 0x39, 0x12,
	0xf4, 0x59, 0x91, 0xd6, 0xbe, 0x22, 0xad, 0xef, 0x8a, 0xb4, 0x5e, 0x9f, 0xa4, 0xf2, 0x9b, 0x90,
	0xcd, 0x73, 0x30, 0x2c, 0xdf, 0xf0, 0x42, 0x0b, 0x61, 0xd7, 0x42, 0x31, 0x03, 0xef, 0x41, 0x0b,
	0xc7, 0x94, 0xcd, 0x43, 0xc6, 0x3d, 0x14, 0x2c, 0x7e, 0x20, 0xf3, 0xe5, 0x56, 0xb8, 0xac, 0xd3,
	0x3c, 0xff, 0xf1, 0x37, 0x00, 0x00, 0xff, 0xff, 0x94, 0x42, 0x00, 0xee, 0x68, 0x01, 0x00, 0x00,
}

func (m *MsgMining) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMining) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMining) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Tally != 0 {
		i = encodeVarintStatus(dAtA, i, uint64(m.Tally))
		i--
		dAtA[i] = 0x18
	}
	if m.Lasttime != 0 {
		i = encodeVarintStatus(dAtA, i, uint64(m.Lasttime))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Minter) > 0 {
		i -= len(m.Minter)
		copy(dAtA[i:], m.Minter)
		i = encodeVarintStatus(dAtA, i, uint64(len(m.Minter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMiningResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMiningResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMiningResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintStatus(dAtA []byte, offset int, v uint64) int {
	offset -= sovStatus(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgMining) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Minter)
	if l > 0 {
		n += 1 + l + sovStatus(uint64(l))
	}
	if m.Lasttime != 0 {
		n += 1 + sovStatus(uint64(m.Lasttime))
	}
	if m.Tally != 0 {
		n += 1 + sovStatus(uint64(m.Tally))
	}
	return n
}

func (m *MsgMiningResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovStatus(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStatus(x uint64) (n int) {
	return sovStatus(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgMining) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMining: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMining: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Minter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lasttime", wireType)
			}
			m.Lasttime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lasttime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tally", wireType)
			}
			m.Tally = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tally |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStatus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStatus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMiningResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMiningResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMiningResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipStatus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStatus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStatus(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStatus
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStatus
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStatus
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStatus
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStatus        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStatus          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStatus = fmt.Errorf("proto: unexpected end of group")
)
